module GraphqlGenerator
  PARAMETERS_PATH = "/components/parameters".freeze
  SCHEMAS_PATH = "/components/schemas".freeze

  def self.path_parts(openapi_path)
    openapi_path.split("/")[1..-1]
  end

  def self.graphql_schema_file
    @graphql_schema_file ||= Pathname.new(__dir__).join("../../lib/api/graphql.rb").to_s
  end

  def self.graphql_type(format, type)
    case type
    when "string"
      format == "date-time" ? "Types::DateTime" : "types.String"
    when "number"
      "types.Float"
    when "boolean"
      "types.Boolean"
    when "integer"
      "Types::BigInt"
    end
  end

  def self.graphql_add_querytype(sfd, collections)
    sfd.puts("")
    sfd.puts("    QueryType = ::GraphQL::ObjectType.define do")
    sfd.puts("      name \"Query\"")
    sfd.puts("      description \"The query root of this schema\"")
    sfd.puts("")

    collection_list = collections.map { |c| ":#{c}" }.join(", ")
    sfd.puts("      [")
    sfd.puts("        #{collection_list}")
    sfd.puts("      ].each do |collection|")
    sfd.puts("")
    sfd.puts("        klass_name = collection.to_s.camelize.singularize")
    sfd.puts("        model_class = klass_name.constantize")
    sfd.puts("        resource_type = \"Api::GraphQL::\#{klass_name}Type\"")
    sfd.puts("        field collection.to_sym do")
    sfd.puts("          type types[resource_type.constantize]")
    sfd.puts("          argument :id, types.String")
    sfd.puts("          description model_class.name.pluralize")
    sfd.puts("          resolve lambda { |_obj, args, _ctx|")
    sfd.puts("            args[:id] ? model_class.where(:id => args[:id]) : model_class.all")
    sfd.puts("          }")
    sfd.puts("        end")
    sfd.puts("      end")
    sfd.puts("    end")
    sfd.puts("")
    sfd.puts("    Schema = ::GraphQL::Schema.define do")
    sfd.puts("      query QueryType")
    sfd.puts("    end")
  end

  def self.generate(openapi_content)
    sfd = File.open(graphql_schema_file, "w")
    sfd.puts("# Do not update - this file is auto-generated by rake openapi:generate[graphql]")
    sfd.puts("")
    sfd.puts("require \"api/graphql/types/big_int\"")
    sfd.puts("require \"api/graphql/types/date_time\"")
    sfd.puts("")
    sfd.puts("module Api")
    sfd.puts("  module GraphQL")
    resources = openapi_content["paths"].keys.sort
    collections = []
    resources.each do |resource|
      next unless openapi_content.dig("paths", resource, "get") # we only care for queries

      rmatch = resource.match("^/(.*)/{id}$")
      next unless rmatch

      collection = rmatch[1]
      klass_name = collection.camelize.singularize
      this_schema = openapi_content.dig(*path_parts(SCHEMAS_PATH), klass_name)
      next if this_schema["type"] != "object" || this_schema["properties"].nil?

      sfd.puts("") unless collections.empty?
      collections << collection

      properties = this_schema["properties"]
      sfd.puts("    #{klass_name}Type = ::GraphQL::ObjectType.define do")
      sfd.puts("      name \"#{klass_name}\"")
      sfd.puts("      description \"A #{klass_name}\"")
      sfd.puts("")
      properties.keys.sort.each do |property_name|
        property_schema = properties[property_name]
        property_schema = openapi_content.dig(*path_parts(property_schema["$ref"])) if property_schema["$ref"]
        format       = property_schema["format"] || ""
        type         = property_schema["type"]
        graphql_type = graphql_type(format, type)
        desc_append  = property_schema["description"] ? ", \"#{property_schema['description']}\"" : ""
        if graphql_type
          sfd.puts("      field :#{property_name}, #{graphql_type(format, type)}#{desc_append}")
        end
      end
      sfd.puts("    end")
    end
    graphql_add_querytype(sfd, collections)
    sfd.puts("  end")
    sfd.puts("end")
    sfd.close
  end
end
